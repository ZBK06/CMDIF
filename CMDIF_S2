// 1. Define Region of Interest (ROI)
var roi = ee.Geometry.Polygon(
  [[[32.81201278251589, 1.7035206744239066],
    [32.81201278251589, 1.272453722443622],
    [33.32287704032839, 1.272453722443622],
    [33.32287704032839, 1.7035206744239066]]], null, false);

// 2. Display ROI on the map
Map.addLayer(roi, {palette: 'black'}, "ROI");

// 3. Define Sentinel-2 bands and time range for the study
var S2bands = ['B1', 'B2', 'B3', 'B4', 'B5', 'B6', 'B7', 'B8', 'B8A', 'B9', 'B11', 'B12',
    'LSWI', 'mNDWI', 'NDWI', 'AWEIsh', 'AWEInsh', 'ndvi', 'evi', 'savi'];
var startDate = '2023-01-01';
var endDate = '2023-02-01';

// 4. Load and preprocess Sentinel-2 data
var S2_image = ee.ImageCollection("COPERNICUS/S2_SR_HARMONIZED")
  .filterBounds(roi)
  .filterDate(startDate, endDate)
  .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE', 20))
  .map(maskS2clouds)
  .map(S2addIndices)
  .select(S2bands)
  .map(function(image) { return image.clip(roi); });

var S2_median = S2_image.median();
print('Sentinel-2 Median Image:', S2_median);

// 5. Load and preprocess Dynamic World data
var dwComposite = ee.ImageCollection("GOOGLE/DYNAMICWORLD/V1")
  .filterBounds(roi)
  .filterDate(startDate, endDate)
  .select('label')
  .reduce(ee.Reducer.mode())
  .clip(roi);

var dwCompositeRemapped = dwComposite.remap([0, 1, 2, 3, 4, 5, 6, 7, 8], [0, 1, 1, 1, 1, 1, 2, 3, 4]).rename('landcover');

// 6. Combine Sentinel-2 and Dynamic World data
var S2Features = S2_median.addBands(dwCompositeRemapped);
print('Combined Sentinel-2 and Dynamic World Features:', S2Features);

// 7. Stratified Sampling for landcover classes
var stratifiedSample = dwCompositeRemapped.stratifiedSample({
  numPoints: 1000,
  classBand: 'landcover',
  region: roi,
  scale: 10,
  geometries: true
});
print('Stratified Sample:', stratifiedSample);

// 8. Sample Sentinel-2 data using stratified samples
var combinedSample = S2Features.sampleRegions({
  collection: stratifiedSample,
  scale: 10,
  geometries: true
});
print('Combined Sample:', combinedSample);

// 9. Visualize Sentinel-2 data and stratified samples
Map.addLayer(S2_median, {bands: ['B8', 'B3', 'B2'], min: 0, max: 0.3}, 'S2 Resampled');
Map.addLayer(stratifiedSample, {color: 'red', pointSize: 5}, 'Sample Landcover');

// 10. Split into training and test samples
var alldata = combinedSample.randomColumn('random');
var training_samples = alldata.filter(ee.Filter.lte('random', 0.7));
var test_samples = alldata.filter(ee.Filter.gte('random', 0.7));
print("Training Samples:", training_samples);
print("Test Samples:", test_samples);

// 11. Train RandomForest classifier
var classifier = ee.Classifier.smileRandomForest(100).train({
  features: training_samples,
  classProperty: 'landcover',
  inputProperties: S2bands
});

// 12. Classify Sentinel-2 data
var classified = S2_median.classify(classifier);

// 13. Remap classification results and visualize
var updated_classified = classified.remap([0, 1, 2, 3, 4], [1, 2, 3, 4, 5]);
var VIS_PALETTE = ['blue', 'green', 'red', 'yellow', 'white'];
Map.addLayer(updated_classified, {min: 1, max: 5, palette: VIS_PALETTE}, 'Updated Landcover Classification');

// 14. Export the stratified sample and classified image
Export.table.toDrive({
  collection: combinedSample,
  description: 'S2Samples_202301',
  fileFormat: 'SHP'
});

Export.image.toDrive({
  image: updated_classified,
  description: '202301classify',
  fileNamePrefix: '202301classify',
  region: roi,
  scale: 10,
  maxPixels: 1e13,
  fileFormat: 'GeoTIFF'
});

// 15. Define the function to add indices to Sentinel-2 images
function S2addIndices(image) {
  var lswi = image.normalizedDifference(['B8', 'B12']).rename('LSWI');
  var mndwi = image.normalizedDifference(['B3', 'B11']).rename('mNDWI');
  var ndwi = image.normalizedDifference(['B3', 'B8']).rename('NDWI');
  var aweish = image.expression(
    'B2 + 2.5 * B3 - 1.5 * (B8 + B11) - 0.25 * B12', {
      'B2': image.select('B2'),
      'B3': image.select('B3'),
      'B8': image.select('B8'),
      'B11': image.select('B11'),
      'B12': image.select('B12')
  }).rename('AWEIsh').toFloat();
  var aweinsh = image.expression(
    '4 * (B2 - B11) - (0.25 * B8 + 2.75 * B12)', {
      'B2': image.select('B2'),
      'B8': image.select('B8'),
      'B11': image.select('B11'),
      'B12': image.select('B12')
  }).rename('AWEInsh').toFloat();
  var ndvi = image.normalizedDifference(['B8', 'B4']).rename('ndvi');
  var evi = image.expression(
    '2.5 * ((NIR - RED) / (NIR + 6 * RED - 7.5 * BLUE + 1))', {
      NIR: image.select('B5'),
      RED: image.select('B4'),
      BLUE: image.select('B2')
  }).rename('evi');
  var savi = image.expression(
    '1.5 * ((NIR - RED) / (NIR + RED + 0.5))', {
      'NIR': image.select('B8'),
      'RED': image.select('B4'),
  }).rename('savi');
  return image.addBands([lswi, mndwi, ndwi, aweish, aweinsh, ndvi, evi, savi]);
}

// 16. Cloud mask function for Sentinel-2
function maskS2clouds(image) {
  var qa = image.select('QA60');
  var cloudBitMask = 1 << 10;
  var cirrusBitMask = 1 << 11;
  var mask = qa.bitwiseAnd(cloudBitMask).eq(0)
    .and(qa.bitwiseAnd(cirrusBitMask).eq(0));
  return image.updateMask(mask).divide(10000);  // Normalize the image
}
